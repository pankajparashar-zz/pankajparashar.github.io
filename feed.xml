<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Pankaj Parashar</title>
	<link href="http://pankajparashar.com/"/>
	<link type="application/atom+xml" rel="self" href="http://pankajparashar.com/feed.xml"/>
	<updated>2014-02-01T23:35:24+05:30</updated>
	<id>http://pankajparashar.com/</id>
	<author>
		<name>Pankaj Parashar</name>
		<email>email@pankajparashar.com</email>
	</author>

	
		<entry>
			<id>http://pankajparashar.com/2013/12/21/my-frontend-build-tool-wishlist</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/2013/12/21/my-frontend-build-tool-wishlist/"/>
			<title>My frontend build tool wishlist...</title>
			<published>2013-12-21T00:00:00+05:30</published>
			<updated>2013-12-21T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;Assuming, you have completed the development work on the frontend of your next web project and are ready to deploy it in production. A typical project involves concatenating and minifying the assets, checking the code for errors, compressing the images and testing it across different combination and breed of browsers, devices and operating system. So, here goes my wishlist,&lt;/p&gt;

&lt;p&gt;The typical build process of a project follows,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;Compilation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Linting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Concatenation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Compression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Miscellaneous&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hence, I have divided the build task into the following categories,&lt;/p&gt;

&lt;h3&gt;Compilation&lt;/h3&gt;

&lt;p&gt;If you use some kind of a pre-processor in your workflow to write your HTML, CSS or JavaScript, the compilation of code into its raw form naturally becomes the first step of any build task.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#8&quot;&gt;HAML&lt;/a&gt; / &lt;a href=&quot;#9&quot;&gt;MarkDown&lt;/a&gt; / &lt;a href=&quot;#10&quot;&gt;Jade&lt;/a&gt; / &lt;a href=&quot;#11&quot;&gt;Slim&lt;/a&gt; to HTML.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12&quot;&gt;Sass&lt;/a&gt; / &lt;a href=&quot;#12&quot;&gt;SCSS&lt;/a&gt; / &lt;a href=&quot;#13&quot;&gt;LESS&lt;/a&gt; / &lt;a href=&quot;#14&quot;&gt;Stylus&lt;/a&gt; to CSS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Compass&lt;/a&gt; / &lt;a href=&quot;#&quot;&gt;Bourbon&lt;/a&gt; to CSS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#15&quot;&gt;CoffeeScript&lt;/a&gt; / &lt;a href=&quot;#16&quot;&gt;LiveScript&lt;/a&gt; / &lt;a href=&quot;#17&quot;&gt;TypeScript&lt;/a&gt; to JavaScript.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Linting&lt;/h3&gt;

&lt;p&gt;Linting refers to validating your code against errors, suspicous code and checking if the code corresponds to a certain style guidelines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lint all &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Should have the ability to configure linting rules and flexiblity to add new style guidelines rules.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Concatenation&lt;/h3&gt;

&lt;p&gt;Concatenation combines several files of the same type into a single file so that you can reduce the number of HTTP requests to the server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Combining &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files separately with added flexiblity to choose the order in which the files are merged.&lt;/li&gt;
&lt;li&gt;Sprite all background images into a single image file and update the CSS code with the correct background url and position value of each image.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Compression&lt;/h3&gt;

&lt;p&gt;Compression helps reduce the overall size of the resource being transferred across the network. Following are some of the ways we can achieve compression,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compress all the &lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.gif&lt;/code&gt; and &lt;code&gt;.svg&lt;/code&gt; images with the ability to choose the compression/optimization level.&lt;/li&gt;
&lt;li&gt;Minify the &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt; and the &lt;code&gt;.js&lt;/code&gt; document with optional features like add banner, keep special comments and report useful statistics at the end of the process.&lt;/li&gt;
&lt;li&gt;Generate source maps for CSS and JS files to define an exact mapping between the production code and the authored code.&lt;/li&gt;
&lt;li&gt;Remove unused CSS rulesets.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Hashing&lt;/h3&gt;

&lt;p&gt;Using hash-ed filenames in addition to the Expiry headers, can help bust the cache without worrying about old assets wreaking havoc on your site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename assets (&lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt; and images embedded in CSS) with hash-ed filenames to bust the cache and update the references in the source code.&lt;/li&gt;
&lt;li&gt;Hashed filename can be a prefix, suffix or a custom naming pattern scheme.&lt;/li&gt;
&lt;li&gt;It should also have the ability to choose a pre-defined algorithm like &lt;a href=&quot;http://en.wikipedia.org/wiki/MD5&quot;&gt;MD5&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA1&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-2&quot;&gt;SHA2&lt;/a&gt; etc. or a custom algorithm to generate the hash value.&lt;/li&gt;
&lt;li&gt;An added flexibility to define the number of characters, salt of the output value.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Miscellaneous&lt;/h3&gt;

&lt;p&gt;Some of the tasks that do not belong to any of the aforementioned categories are below,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add banner at the top of &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files indicating the license, author and the version no of the file with the ability to automatically increment the no. after every iteration.&lt;/li&gt;
&lt;li&gt;Resize images to a predetermined width/height to avoid excessive image resize/decode work on the client-side in the browser.&lt;/li&gt;
&lt;li&gt;Generate responsive images on demand at different resolutions for use with &lt;a href=&quot;https://github.com/scottjehl/picturefill&quot;&gt;PictureFill&lt;/a&gt; or &lt;a href=&quot;http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/&quot;&gt;Srcset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Convert longhand CSS declarations to shorthand CSS equivalent.&lt;/li&gt;
&lt;li&gt;Automatically add vendor prefixes to CSS properties.&lt;/li&gt;
&lt;li&gt;Arrange CSS properties in alphabetical order to &lt;a href=&quot;http://coding.smashingmagazine.com/2012/10/02/csscomb-tool-sort-css-properties/&quot;&gt;improve the performance of the selector&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Convert assets like images and fonts to their equivalent base64 encoded data uris with the ability to choose the threshold size &lt;code&gt;(~4kb)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Integration with unit testing framework like &lt;a href=&quot;http://visionmedia.github.io/mocha/&quot;&gt;Mocha&lt;/a&gt; or &lt;a href=&quot;http://pivotal.github.io/jasmine/&quot;&gt;Jasmine&lt;/a&gt; or &lt;a href=&quot;http://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; in a headless browser like &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Automatically push static assets (like images) embedded in HTML directly to CDN (like &lt;a href=&quot;http://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt; or &lt;a href=&quot;http://aws.amazon.com/cloudfront/&quot;&gt;CloudFront&lt;/a&gt; and update the new url in the source files.&lt;/li&gt;
&lt;li&gt;Automatically generate device screenshots on various combination of browsers and operating system via &lt;a href=&quot;http://www.browserstack.com/screenshots/api&quot;&gt;BrowserStack&#39;s Screenshot API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run through Google&#39;s &lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot;&gt;Pagespeed Optimizer API&lt;/a&gt; and the &lt;a href=&quot;http://tools.pingdom.com/&quot;&gt;Pingdom Tools API&lt;/a&gt; to gather Network Utilisation, Web Page Performance audit and other useful statistics that helps you gather significant information about the performance of your website.&lt;/li&gt;
&lt;li&gt;Identify all the links (both external/internal) that no-longer exists or doesn&#39;t return HTTP 200.&lt;/li&gt;
&lt;li&gt;Generate documentation of the entire project supported with CSS Style Guides and JavaScript functions.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Grulp Project&lt;/h3&gt;

&lt;p&gt;I understand that no build tool would ever be able to meet the outrageous demands of the list above. However, I started with a project on Github to compile a list of ready-to-use grunt/gulp plugins that accomplishes most of the tasks.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img alt=&quot;Grulp&quot; src=&quot;http://res.cloudinary.com/dw9fem4ki/image/upload/v1391267025/grulp-github-project_gmjmw2.png&quot; style=&quot;border-bottom: 1px solid #eee; padding: 0 0 0 0em;&quot;&gt;
    &lt;figcaption&gt;Grulp - List of ready-to-use grunt/gulp plugins to build your next web project.&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/http:/www.w3.org/TR/css3-selectors/css-selectors-level-3</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/http:/www.w3.org/TR/css3-selectors/#selectors"/>
			<title>CSS Selectors Level 3</title>
			<published>2013-12-20T00:00:00+05:30</published>
			<updated>2013-12-20T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;A Selector represents a structure that can be used as a condition to determine which elements a selector matches in the document tree.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://css-tricks.com/almanac/&quot;&gt;CSS-Tricks Almanac&lt;/a&gt; is an alternative resource to read more about the CSS Selectors and Properties.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/css3-selectors/#selectors&quot;&gt;Checkout the W3C Draft&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/https:/gist.github.com/pankajparashar/effective-shorthand-css-techniques</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/https:/gist.github.com/pankajparashar/6752823"/>
			<title>Effective shorthand CSS techniques</title>
			<published>2013-12-16T00:00:00+05:30</published>
			<updated>2013-12-16T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;There is no official guide for each and every CSS shorthand property. So I wrote a gist to document all the shorthand declarations that we could ever write in CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/pankajparashar/6752823&quot;&gt;Checkout this gist&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/http:/css-tricks.com/the-html5-meter-element</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/http:/css-tricks.com/html5-meter-element/"/>
			<title>The HTML5 meter element</title>
			<published>2013-11-27T00:00:00+05:30</published>
			<updated>2013-11-27T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;Thanks to Chris Coyier, for offering me the opportunity to write for &lt;a href=&quot;#&quot;&gt;CSS-Tricks&lt;/a&gt; once again. This article also got featured on,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Design &amp;amp; Development News - &lt;a href=&quot;#&quot;&gt;Collective #92&lt;/a&gt; by Codrops.&lt;/li&gt;
&lt;li&gt;CSS Weekly - &lt;a href=&quot;#&quot;&gt;Issue #87&lt;/a&gt; by Zoran Jambor.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;figure&gt;
    &lt;img src=&quot;http://res.cloudinary.com/dw9fem4ki/image/upload/v1386405482/OSX_style_Disk_Usage_CodePen_cn05rz.png&quot;&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;Read on CSS-Tricks&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/https:/www.typotheque.com/articles/open-type-font-features</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/https:/www.typotheque.com/articles/opentype_features_in_web_browsers"/>
			<title>OpenType features in web browsers</title>
			<published>2013-09-16T00:00:00+05:30</published>
			<updated>2013-09-16T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;An overview of the current state of OpenType feature support in web browsers, based on the CSS syntax proposed by the latest draft of the CSS3 Fonts specification and the latest available version of each browser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ie.microsoft.com/testdrive/Graphics/opentype/&quot;&gt;IE11 Test Drive&lt;/a&gt; also showcases all the Open Type features using 3 different demonstrations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.typotheque.com/articles/opentype_features_in_web_browsers&quot;&gt;Read the article on Typotheque&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/http:/css-tricks.com/the-html5-progress-element</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/http:/css-tricks.com/html5-progress-element/"/>
			<title>The HTML5 progress element</title>
			<published>2013-08-28T00:00:00+05:30</published>
			<updated>2013-08-28T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;I wrote this article as a guest post for &lt;a href=&quot;#&quot;&gt;CSS-Tricks&lt;/a&gt; and also got featured on,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Design &amp;amp; Development News - &lt;a href=&quot;#&quot;&gt;Collective #79&lt;/a&gt; by Codrops.&lt;/li&gt;
&lt;li&gt;HTML5 Weekly - &lt;a href=&quot;#&quot;&gt;Issue #104&lt;/a&gt; by Peter Cooper.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;figure&gt;
    &lt;img src=&quot;http://res.cloudinary.com/dw9fem4ki/image/upload/v1386423368/Skillset_using_HTML5_progress_bars_with_CSS3_animations_CodePen_vxmsie.png&quot;&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;Read on CSS-Tricks&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/2013/05/05/why-do-i-hate-css-preprocessors</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/2013/05/05/why-do-i-hate-css-preprocessors/"/>
			<title>Why Do I hate CSS preprocessors?</title>
			<published>2013-05-05T00:00:00+05:30</published>
			<updated>2013-05-05T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;For the past few months I have been struggling to convince myself to switch to a CSS preprocessing language like &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; or &lt;a href=&quot;http://www.lesscss.org/&quot;&gt;LESS&lt;/a&gt;. But on the contrary, I ended up documenting the reasons for not using a CSS preprocessor. Here’s why,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Since, the time I wrote this article, I&#39;ve moved on to use SCSS as my primary pre-processing language, due to its ability to understand plain CSS as well. I don&#39;t use all the features offered by SCSS, but use only few of them like variables, mixins, nesting etc. that helps me write better CSS.&lt;br&gt;&lt;br&gt;&lt;span style=&quot;text-align:left;display:block;&quot;&gt;– November 23, 2013&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Another language to write CSS?&lt;/h3&gt;

&lt;p&gt;CSS preprocessor is just another language to write CSS. It takes you away from the simplicty of CSS. Moreover, if it gets into your head then there is every chance that one day you might forget the CSS syntax altogether.&lt;/p&gt;

&lt;p&gt;I realized this problem when I started using the Sass with &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; (that provides readymade add-ons) to use the &lt;a href=&quot;http://compass-style.org/reference/compass/css3/box_shadow/&quot;&gt;mixin for box-shadow&lt;/a&gt; by simply passing the parameters.&lt;/p&gt;

&lt;p&gt;The mixin works wonderfully well, but wait! did I forget how to write the CSS for box-shadow? Agreed that care has been taken to keep the syntax similar, but who really wants to learn a new language that essentially gives the output in CSS?&lt;/p&gt;

&lt;h3&gt;Losing the bigger picture&lt;/h3&gt;

&lt;p&gt;Writing pure CSS always brings me closer to the fact that how simple this language is. I write my HTML and JavaScript keeping in mind the simplicity that css can offer. This ensures that my CSS is always used for the presentational aspects only, whereas the complexities are dealt by JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/fit/t/1800/756/0*MIhIq2HVG_osB0mU.jpeg&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;However, the variables, mixins, extends, nesting etc., in preprocessors forces us to define our approach to write CSS in a programmatic manner rather than aesthetic one. Hence, it is easier to get carried away and lose the bigger picture, isn’t it?&lt;/p&gt;

&lt;h3&gt;Bloated output CSS file&lt;/h3&gt;

&lt;p&gt;Pundits will quickly discard this point as almost every CSS preprocessing tool on this earth is capable of minifying the output CSS. However, the final file size has more to do with the code written inside the file than just gzip and minification.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://blog.millermedeiros.com/the-problem-with-css-pre-processors/&quot;&gt;Studies&lt;/a&gt; have proved that preprocessors have the tendency of generating redundant snippets of code, when the actual css could have been much smaller.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Lea Verou explains this phenomenon with examples in her &lt;a href=&quot;http://lea.verou.me/2011/03/on-css-preprocessors/&quot;&gt;opinionated article on CSS preprocessors&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Needs additional setup&lt;/h3&gt;

&lt;p&gt;I write my CSS in either Notepad or Vim. The editor and the browser are the only 2 pieces of software that I use for front-end development.&lt;/p&gt;

&lt;p&gt;I don’t want to add additional tools or libraries to my existing workflow. I prefer to keep my workflow light and portable that allows me to work on my code literally from anywhere on any operating system. But preprocessors flirt with this principle since they cannot work without additional toolset like - &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; (for Sass on Windows) and &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node PM&lt;/a&gt; (for LESS).&lt;/p&gt;

&lt;h3&gt;Maintenance and Debugging&lt;/h3&gt;

&lt;p&gt;For a team of CSS developers, do you really expect each one of them to know Sass/LESS? If no, then what happens if another developer wants to edit the CSS file but doesn’t know Sass?&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;Debugging is even harder; when you know that the developer tool of the browser shows you the code and the line number of the css file. Do you want to manually trace the piece of code in your Sass file?&lt;/p&gt;

&lt;p&gt;I do understand the advantages and the benefits that these preprocessors bring to the plate, but with an additional cost. There are counter-arguments probably to every point that I have made in this article. But that still wouldn’t change my opinion and the way I feel about CSS Preprocessors.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don’t hate them but I don’t like them either!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Did you enjoy reading this article? I&#39;d love to hear your thoughts. Shoot me an &lt;a href=&quot;#&quot;&gt;email&lt;/a&gt; or send me a &lt;a href=&quot;#&quot;&gt;tweet&lt;/a&gt; if you&#39;ve got any comments.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/http:/speckyboy.com/2012/10/30/getting-to-grips-with-the-html5-file-api</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/http:/speckyboy.com/2012/10/30/getting-to-grips-with-the-html5-file-api/"/>
			<title>Getting to grips with the HTML5 File API</title>
			<published>2012-10-30T00:00:00+05:30</published>
			<updated>2012-10-30T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;This article demonstrates the basic usage of the HTML5 File APIs to do common tasks like reading the properties and content of the files.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The HTML5 File API allows developers to interact with the local filesystem on the client-side. Using these APIs, developers can build more robust web applications that work seamlessly both online and offline. This tutorial demonstrates the basic usage of these APIs to do common tasks like reading the properties and content of files.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://speckyboy.com/2012/10/30/getting-to-grips-with-the-html5-file-api/&quot;&gt;Read on SpeckyBoy Design Magazine&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<id>http://pankajparashar.com/http:/txpmag.com/meaningful-labour/dissecting-html5-boilerplate-4.0</id>
			<link type="text/html" rel="alternate" href="http://pankajparashar.com/http:/txpmag.com/meaningful-labour/dissecting-html5-boilerplate-40"/>
			<title>Dissecting HTML5 Boilerplate 4.0</title>
			<published>2012-10-10T00:00:00+05:30</published>
			<updated>2012-10-10T00:00:00+05:30</updated>
			<author>
				<name>Pankaj Parashar</name>
				<email>email@pankajparashar.com</email>
			</author>
			<content type="html">&lt;p&gt;I wrote this article as a contributing author for the &lt;a href=&quot;#&quot;&gt;TXP Magazine&lt;/a&gt; and was featured in &lt;a href=&quot;#&quot;&gt;Issue No #3&lt;/a&gt;. Big thanks to Destry Wion for proof reading this article!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you are looking for a perfect HTML5 template to kickstart your new project that should be fast, robust and cross-browser compatible, you do not have to look beyond the HTML5 Boilerplate. The world’s most popular frontend template is a result of the combined knowledge and effort of more than 100 developers, making it one of the most popular projects on GitHub. But before you skip this article to press the download button, you need to understand; what makes this framework so popular?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;Read on TXP Magazine&lt;/a&gt;&lt;/p&gt;
</content>
		</entry>
	

</feed>
